# Backup of original calibration_tab.py
# This file is preserved for reference purposes only.
# The actual functionality has been refactored into the calibration/ directory.

#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Calibration Tab Module
=====================

Tennis court calibration tab for selecting key points on tennis court images.
This module provides a tab interface for users to select key points on 
tennis court images and save those points to a JSON file for later use
in the tracking system.

"""

import os
import json
import logging
from typing import List, Tuple, Optional

from PySide6.QtCore import Qt, Signal, QPoint, QEvent
from PySide6.QtGui import QPixmap, QPainter, QPen, QColor, QFont
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QGridLayout, QFileDialog, QMessageBox, QFrame, QSizePolicy
)

from core.image_manager import ImageManager
from core.app_state import AppState

class CalibrationTab(QWidget):
    """
    A tab widget for selecting key points on tennis court images.
    
    This tab allows a user to select 12 key points on an image, view the selected points,
    and save them to a JSON file.
    """
    
    # Signal emitted when calibration is completed (all points selected)
    calibration_completed = Signal(str)  # Signal parameter: camera_name
    
    def __init__(self, parent=None):
        """Initialize the calibration tab"""
        super().__init__(parent)
        
        # 왼쪽/오른쪽 카메라별 키 포인트 관리
        self.left_key_points: List[Tuple[int, int]] = []
        self.right_key_points: List[Tuple[int, int]] = []
        self.key_points: List[Tuple[int, int]] = []  # 현재 활성 카메라 포인트 참조
        
        # 왼쪽/오른쪽 카메라별 현재 선택된 포인트 인덱스
        self.left_selected_point_idx: int = -1
        self.right_selected_point_idx: int = -1
        self.selected_point_idx: int = -1  # 현재 활성 카메라 선택 인덱스 참조
        
        self.total_points: int = 12  # Total number of points to select
        
        # Status variables
        self.active_camera: str = "left"  # Current active camera ("left" or "right")
        
        # Image variables
        self.left_pixmap: Optional[QPixmap] = None
        self.right_pixmap: Optional[QPixmap] = None
        
        # 드래깅 관련 변수
        self.dragging: bool = False
        self.drag_start_pos = None
        
        # Get singleton instances
        self.image_manager = ImageManager.instance()
        self.app_state = AppState.instance()
        self.logger = logging.getLogger(__name__)
        
        # Connect to image manager signals
        self.image_manager.current_image_changed.connect(self._on_current_image_changed)
        
        # Setup the user interface
        self._setup_ui()
        
        # Load any saved points
        self.load_points_from_json()
        
        # 기본 활성 카메라 설정
        if self.active_camera == "left":
            self.key_points = self.left_key_points
            self.selected_point_idx = self.left_selected_point_idx
        else:
            self.key_points = self.right_key_points
            self.selected_point_idx = self.right_selected_point_idx
        
        # Display the images
        self.update_images_from_manager()
        
        # Update status
        self._update_status_info()
    
---
description: 
globs: 
alwaysApply: false
---
Below is the English translation in a “Cursor AI rules” format:

---

**Rule 1: Understand the Concept**  
- **Background Tasks:** Tasks that run concurrently with your main program to boost responsiveness (e.g., periodic file parsing, I/O operations).
- **Key Objective:** Execute tasks without blocking the main flow.

---

**Rule 2: Choose the Appropriate Method**  
- **Threading:**  
  - Use for I/O-bound tasks.
  - Leverages Python’s shared memory but is limited by the GIL.
- **Multiprocessing:**  
  - Use for CPU-bound tasks.
  - Runs tasks in separate processes (each with its own memory space), avoiding GIL constraints.

---

**Rule 3: Follow the Correct Implementation Sequence**

*For Threading:*
1. **Define the Target Function:**  
   - Write a function for the background task (e.g., file parsing in a loop with sleep intervals).
2. **Create a Thread Object:**  
   ```python
   import threading
   def background_task():
       while True:
           print("Background thread task executing")
           time.sleep(1)
   ```
3. **Set Daemon Flag (if desired):**  
   - Ensure the thread terminates when the main program exits.
   ```python
   t = threading.Thread(target=background_task)
   t.daemon = True
   ```
4. **Start the Thread:**  
   ```python
   t.start()
   ```
5. **Optionally Use join():**  
   - Wait for thread termination when needed.

*For Multiprocessing:*
1. **Define the Target Function:**  
   - Write a function that performs the desired background operation.
2. **Protect the Main Block:**  
   - Use `if __name__ == '__main__':` to prevent recursive execution.
3. **Create a Process Object:**  
   ```python
   import multiprocessing
   def background_task():
       while True:
           print("Background process task executing")
           time.sleep(1)
   
   if __name__ == '__main__':
       p = multiprocessing.Process(target=background_task)
       p.daemon = True  # Optional: set to True if automatic termination is desired.
   ```
4. **Start the Process:**  
   ```python
       p.start()
   ```
5. **Optionally Use join():**  
   - Wait for process termination when needed.

---

**Rule 4: Adhere to Best Practices**

- **DO:**
  - Use synchronization primitives (e.g., Lock, Event) when sharing data.
  - Ensure target functions for multiprocessing are defined at the module’s top level (avoid lambdas or inner functions).
  - Periodically check for termination signals in long-running loops.
  - Protect multiprocessing code with `if __name__ == '__main__':`.

- **DON’T:**
  - Access shared resources without proper synchronization.
  - Create tight infinite loops that overuse CPU without sleep intervals.
  - Use non-serializable (non-pickleable) objects as process arguments.
  - Ignore potential memory leaks in long-running tasks.

---

**Rule 5: Manage Resource Cleanup and Termination**

- **For Threads:**  
  - Use flags or `threading.Event` to signal a clean exit.
  - Avoid forcibly killing a thread; design the thread to check for exit conditions.

- **For Processes:**  
  - Use safe inter-process communication (Queue, Pipe) to share data.
  - Consider controlled shutdown mechanisms rather than abrupt termination.
  - Monitor resource usage to avoid memory leaks in long-running processes.

---

**Rule 6: Reference and Validate**  
- **Resources:**  
  - [PyMOTW – Multiprocessing Basics (Python 2.7)](mdc:https:/pymotw.com/2/multiprocessing/basics.html)
  - [Real Python – An Intro to Threading in Python](mdc:https:/realpython.com/intro-to-python-threading)
- **Verification:**  
  - Test each component independently.
  - Use logging to trace execution and ensure proper synchronization.

---

By following these rules, you can implement stable background tasks in Python 2.7 using threading or multiprocessing while avoiding common pitfalls such as race conditions, improper resource management, and unexpected behavior on program exit.